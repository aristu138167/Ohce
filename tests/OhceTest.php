<?php

namespace UserLoginService\Tests;

use Mockery;
use PHPUnit\Framework\TestCase;
use UserLoginService\DateProvider;
use UserLoginService\Ohce;



class OhceTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->dateProvider = Mockery::mock(DateProvider::class);
        $this->ohce = new Ohce($this->dateProvider);
    }

    /**
     * @test
     */
    public function echoesPalabraInvertidaNoPalindroma()
    {

        $respuesta = $this->ohce->responder("hola");

        $this->assertEquals("aloh", $respuesta);
    }

    /**
     * @test
     */
    public function likesPalabraInvertidaSiPalindroma()
    {

        $respuesta = $this->ohce->responder("oto");

        $this->assertEquals("oto" . " ¡Bonita palabra!", $respuesta);
    }

    /**
     * @test
     */
    public function greetsInMorning()
    {

        $this->dateProvider->expects("getTime")->andReturn('07:00:00');

        $respuesta = $this->ohce->responder("ohce Pedro");

        $this->assertEquals("¡Buenos días Pedro!", $respuesta);
    }

    /**
     * @test
     */
    public function greetsInAfternoon()
    {
        $this->dateProvider->expects("getTime")->andReturn('16:00:00');

        $respuesta = $this->ohce->responder("ohce Pedro");

        $this->assertEquals("¡Buenas tardes Pedro!", $respuesta);
    }

    /**
     * @test
     */
    public function greetsInNight()
    {
        $this->dateProvider->expects("getTime")->andReturn('22:00:00');

        $respuesta = $this->ohce->responder("ohce Pedro");

        $this->assertEquals("¡Buenas noches Pedro!", $respuesta);
    }
}
